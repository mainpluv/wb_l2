package main

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)        // <nil>
	fmt.Println(err == nil) // false
}

// выведется <nil>\nfalse, так как переменная err содержит нулевое значение, но
// при сравнении err == nil мы получим false, так как err имеет тип *os.PathError,
// который является указателем, и поэтому даже если этот указатель равен nil,
// сама переменнная err!=nil, ведь она содержит адрес памяти.

// Внутренне интерфейсы представленны 2 элементами: указателем на тип интерфейса и на тип данных и
// unsafe указатель на значение, которое хранит интерфейс.
// Отличие между интерфейсами и пустыми интерфейсами заключается в том,
// что первые описывают поведение, которое должен реализовывать тип, в то время как пустые интерфейсы предоставляют
// общий контейнер для значений любого типа без установки каких либо ограничений на поведение.
